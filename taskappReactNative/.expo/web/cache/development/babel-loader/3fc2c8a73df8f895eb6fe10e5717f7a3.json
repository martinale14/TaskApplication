{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/martin/Documents/estudios/react-native/myApp/App.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport * as Font from 'expo-font';\nimport AppLoading from 'expo-app-loading';\nimport { StatusBar } from 'expo-status-bar';\nimport React, { Component } from 'react';\nimport Icon from \"@expo/vector-icons/FontAwesome\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport CheckBox from \"react-native-web/dist/exports/CheckBox\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\n\nvar App = function (_Component) {\n  _inherits(App, _Component);\n\n  var _super = _createSuper(App);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      color: '#ffa500',\n      fontsLoaded: false,\n      tasks: []\n    };\n    _this.pressedOnce = _this.pressedOnce.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.fetchData();\n    }\n  }, {\n    key: \"loadFonts\",\n    value: function loadFonts() {\n      var fonts;\n      return _regeneratorRuntime.async(function loadFonts$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(Font.loadAsync({\n                'Ubuntu-Regular': {\n                  uri: require(\"./assets/ubuntuFont/Ubuntu-Regular.ttf\"),\n                  display: Font.FontDisplay.FALLBACK\n                }\n              }));\n\n            case 2:\n              fonts = _context.sent;\n              return _context.abrupt(\"return\", Promise.all([fonts]));\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"pressedOnce\",\n    value: function pressedOnce() {\n      if (this.state.color != '#ffa500') {\n        this.setState({\n          color: '#ffa500'\n        });\n      } else {\n        this.setState({\n          color: '#6b78c9'\n        });\n      }\n    }\n  }, {\n    key: \"fetchData\",\n    value: function fetchData() {\n      var _this2 = this;\n\n      fetch('http://192.168.20.64:3000/api/tasks').then(function (res) {\n        return res.json();\n      }).then(function (data) {\n        _this2.setState({\n          tasks: data\n        });\n      });\n      this.state.tasks.map(function (el) {\n        return el.isChecked = false;\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var btnHeight = 40;\n      var btnWidth = 120;\n\n      if (this.state.fontsLoaded) {\n        var styles = StyleSheet.create({\n          container: {\n            flex: 1,\n            backgroundColor: '#000',\n            paddingTop: 22\n          },\n          button: {\n            backgroundColor: this.state.color,\n            height: btnHeight,\n            width: btnWidth,\n            justifyContent: 'center',\n            alignItems: 'center',\n            borderRadius: 10,\n            shadowOpacity: 1,\n            shadowColor: this.state.color,\n            shadowOffset: {\n              height: 0,\n              width: 0\n            },\n            shadowRadius: 4,\n            elevation: 5,\n            flex: 1,\n            marginLeft: 10\n          },\n          myFont: {\n            color: 'white',\n            fontFamily: 'Ubuntu-Regular',\n            fontSize: 22,\n            height: 44,\n            textAlignVertical: 'center',\n            flex: 1\n          },\n          list: {\n            marginHorizontal: 20\n          }\n        });\n        return React.createElement(View, {\n          style: styles.container,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 9\n          }\n        }, React.createElement(FlatList, {\n          keyExtractor: function keyExtractor(item) {\n            return item._id;\n          },\n          data: this.state.tasks,\n          renderItem: function renderItem(_ref) {\n            var item = _ref.item,\n                index = _ref.index;\n            return React.createElement(View, {\n              style: {\n                flexDirection: 'row',\n                padding: 10\n              },\n              __self: _this3,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 103,\n                columnNumber: 17\n              }\n            }, React.createElement(CheckBox, {\n              value: item.isChecked,\n              tintColors: {\n                true: 'white',\n                false: 'white'\n              },\n              style: {\n                flex: 0.5\n              },\n              onValueChange: function onValueChange(val) {\n                _this3.state.tasks[index].isChecked = val;\n\n                _this3.setState({});\n              },\n              __self: _this3,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 107,\n                columnNumber: 19\n              }\n            }), React.createElement(Text, {\n              style: styles.myFont,\n              __self: _this3,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 111,\n                columnNumber: 19\n              }\n            }, item.title), React.createElement(Text, {\n              style: {\n                margin: 2,\n                flex: 1,\n                textAlignVertical: 'center',\n                textAlign: 'center',\n                color: 'white'\n              },\n              __self: _this3,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 114,\n                columnNumber: 19\n              }\n            }, item.description), React.createElement(View, {\n              style: {\n                flex: 2\n              },\n              __self: _this3,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 123,\n                columnNumber: 19\n              }\n            }, React.createElement(View, {\n              style: {\n                width: 60,\n                height: 60,\n                padding: 0\n              },\n              __self: _this3,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 124,\n                columnNumber: 21\n              }\n            }, React.createElement(Icon.Button, {\n              name: \"pencil\",\n              size: 20,\n              backgroundColor: \"white\",\n              onPress: function onPress() {},\n              borderRadius: 100,\n              iconStyle: {\n                marginRight: 0,\n                color: 'black'\n              },\n              __self: _this3,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 125,\n                columnNumber: 23\n              }\n            }))));\n          },\n          style: styles.list,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 11\n          }\n        }), React.createElement(StatusBar, {\n          style: \"auto\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 11\n          }\n        }));\n      } else {\n        return React.createElement(AppLoading, {\n          startAsync: this.loadFonts,\n          onFinish: function onFinish() {\n            _this3.setState({\n              fontsLoaded: true\n            });\n          },\n          onError: console.warn,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 14\n          }\n        });\n      }\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/martin/Documents/estudios/react-native/myApp/App.js"],"names":["Font","AppLoading","StatusBar","React","Component","Icon","App","props","state","color","fontsLoaded","tasks","pressedOnce","bind","fetchData","loadAsync","uri","require","display","FontDisplay","FALLBACK","fonts","Promise","all","setState","fetch","then","res","json","data","map","el","isChecked","btnHeight","btnWidth","styles","StyleSheet","create","container","flex","backgroundColor","paddingTop","button","height","width","justifyContent","alignItems","borderRadius","shadowOpacity","shadowColor","shadowOffset","shadowRadius","elevation","marginLeft","myFont","fontFamily","fontSize","textAlignVertical","list","marginHorizontal","item","_id","index","flexDirection","padding","true","false","val","title","margin","textAlign","description","marginRight","loadFonts","console","warn"],"mappings":"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","sourcesContent":["import * as Font from 'expo-font';\nimport AppLoading from 'expo-app-loading';\nimport { StatusBar } from 'expo-status-bar';\nimport React, { Component } from 'react';\nimport Icon from 'react-native-vector-icons/FontAwesome';\nimport { StyleSheet, Text, View, TouchableOpacity, FlatList, CheckBox, Alert } from 'react-native';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      color: '#ffa500',\n      fontsLoaded: false,\n      tasks: []\n    };\n    this.pressedOnce = this.pressedOnce.bind(this);\n  }\n\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  async loadFonts() {\n    const fonts = await Font.loadAsync({\n      'Ubuntu-Regular': {\n        uri: require('./assets/ubuntuFont/Ubuntu-Regular.ttf'),\n        display: Font.FontDisplay.FALLBACK,\n      },\n    });\n    return Promise.all([fonts]);\n  }\n\n  pressedOnce() {\n    if (this.state.color != '#ffa500') {\n      this.setState({ color: '#ffa500' });\n    } else {\n      this.setState({ color: '#6b78c9' });\n    }\n  }\n\n  fetchData() {\n    fetch('http://192.168.20.64:3000/api/tasks')\n      .then(res => res.json())\n      .then(data => {\n        this.setState({ tasks: data });\n      });\n\n    this.state.tasks.map((el) => el.isChecked = false);\n  }\n\n  render() {\n\n    const btnHeight = 40;\n    const btnWidth = 120;\n\n    if (this.state.fontsLoaded) {\n\n      const styles = StyleSheet.create({\n        container: {\n          flex: 1,\n          backgroundColor: '#000',\n          paddingTop: 22,\n        },\n        button: {\n          backgroundColor: this.state.color,\n          height: btnHeight,\n          width: btnWidth,\n          justifyContent: 'center',\n          alignItems: 'center',\n          borderRadius: 10,\n          shadowOpacity: 1,\n          shadowColor: this.state.color,\n          shadowOffset: {\n            height: 0,\n            width: 0,\n          },\n          shadowRadius: 4,\n          elevation: 5,\n          flex: 1,\n          marginLeft: 10,\n        },\n        myFont: {\n          color: 'white',\n          fontFamily: 'Ubuntu-Regular',\n          fontSize: 22,\n          height: 44,\n          textAlignVertical: 'center',\n          flex: 1,\n        },\n        list: {\n          marginHorizontal: 20\n        }\n      });\n\n      return (\n        <View style={styles.container} >\n          <FlatList\n            keyExtractor={item => item._id}\n            data={this.state.tasks}\n            renderItem={({ item, index }) => {\n              return (\n                <View style={{\n                  flexDirection: 'row',\n                  padding: 10,\n                }}>\n                  <CheckBox value={item.isChecked} tintColors={{ true: 'white', false: 'white' }} style={{ flex: 0.5, }} onValueChange={(val) => {\n                    this.state.tasks[index].isChecked = val;\n                    this.setState({});\n                  }} />\n                  <Text style={styles.myFont}>\n                    {item.title}\n                  </Text>\n                  <Text style={{\n                    margin: 2,\n                    flex: 1,\n                    textAlignVertical: 'center',\n                    textAlign: 'center',\n                    color: 'white',\n                  }}>\n                    {item.description}\n                  </Text>\n                  <View style={{ flex: 2 }}>\n                    <View style={{ width: 60, height: 60, padding: 0 }}>\n                      <Icon.Button\n                        name=\"pencil\"\n                        size={20}\n                        backgroundColor=\"white\"\n                        onPress={() => { }}\n                        borderRadius={100}\n                        iconStyle={{\n                          marginRight: 0,\n                          color: 'black',\n                        }}\n                      />\n                    </View>\n                  </View>\n                </View>);\n            }}\n            style={styles.list}\n          />\n          <StatusBar style=\"auto\" />\n        </View>\n      );\n    } else {\n      return <AppLoading startAsync={this.loadFonts}\n        onFinish={() => {\n          this.setState({ fontsLoaded: true });\n        }}\n        onError={console.warn} />;\n    }\n  }\n\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}