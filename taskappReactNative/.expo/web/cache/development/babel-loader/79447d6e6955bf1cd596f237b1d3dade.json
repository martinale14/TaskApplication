{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/martin/Documents/estudios/react-native/myApp/App.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport * as Font from 'expo-font';\nimport { StatusBar } from 'expo-status-bar';\nimport React, { Component } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { Alertxs } from \"react-native-web/dist/index\";\n\nvar App = function (_Component) {\n  _inherits(App, _Component);\n\n  var _super = _createSuper(App);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      color: 'orange',\n      fontsLoaded: false\n    };\n    _this.pressedOnce = _this.pressedOnce.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.loadFonts();\n    }\n  }, {\n    key: \"loadFonts\",\n    value: function loadFonts() {\n      return _regeneratorRuntime.async(function loadFonts$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(Font.loadAsync({\n                'Ubuntu-Regular': {\n                  uri: require(\"./assets/ubuntuFont/Ubuntu-Regular.ttf\"),\n                  display: Font.FontDisplay.FALLBACK\n                }\n              }));\n\n            case 2:\n              this.setState({\n                fontsLoaded: true\n              });\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"pressedOnce\",\n    value: function pressedOnce() {\n      if (this.state.color != 'orange') {\n        this.setState({\n          color: 'orange'\n        });\n      } else {\n        this.setState({\n          color: '#6b78c9'\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (this.state.fontsLoaded) {\n        var styles = StyleSheet.create({\n          container: {\n            flex: 1,\n            backgroundColor: '#fff',\n            alignItems: 'center',\n            justifyContent: 'center'\n          },\n          button: {\n            backgroundColor: this.state.color,\n            height: 40,\n            width: 120,\n            justifyContent: 'center',\n            alignItems: 'center',\n            borderRadius: 10,\n            shadowColor: '#000',\n            shadowOffset: {\n              width: 0,\n              height: 4\n            },\n            shadowOpacity: 0.32,\n            shadowRadius: 5.46,\n            elevation: 9\n          },\n          myFont: {\n            color: 'white'\n          }\n        });\n        return React.createElement(View, {\n          style: styles.container,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 9\n          }\n        }, React.createElement(Text, {\n          style: styles.myFont,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 11\n          }\n        }, \"Open up App.js to start working on your app!\"), React.createElement(Text, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 11\n          }\n        }, '\\n'), React.createElement(TouchableOpacity, {\n          style: styles.button,\n          onPress: this.pressedOnce,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 11\n          }\n        }, React.createElement(Text, {\n          style: styles.myFont,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 13\n          }\n        }, \"Touch Me\")), React.createElement(StatusBar, {\n          style: \"auto\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 11\n          }\n        }));\n      } else {\n        return null;\n      }\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/martin/Documents/estudios/react-native/myApp/App.js"],"names":["Font","StatusBar","React","Component","Alertxs","App","props","state","color","fontsLoaded","pressedOnce","bind","loadFonts","loadAsync","uri","require","display","FontDisplay","FALLBACK","setState","styles","StyleSheet","create","container","flex","backgroundColor","alignItems","justifyContent","button","height","width","borderRadius","shadowColor","shadowOffset","shadowOpacity","shadowRadius","elevation","myFont"],"mappings":"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","sourcesContent":["import * as Font from 'expo-font';\nimport { StatusBar } from 'expo-status-bar';\nimport React, { Component } from 'react';\nimport { StyleSheet, Text, View, TouchableOpacity, Alertxs } from 'react-native';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      color: 'orange',\n      fontsLoaded: false,\n    };\n    this.pressedOnce = this.pressedOnce.bind(this);\n  }\n\n  componentDidMount() {\n    this.loadFonts();\n  }\n\n  async loadFonts() {\n    await Font.loadAsync({\n      'Ubuntu-Regular': {\n        uri: require('./assets/ubuntuFont/Ubuntu-Regular.ttf'),\n        display: Font.FontDisplay.FALLBACK,\n      },\n    });\n    this.setState({ fontsLoaded: true });\n  }\n\n  pressedOnce() {\n    if (this.state.color != 'orange') {\n      this.setState({ color: 'orange' });\n    } else {\n      this.setState({ color: '#6b78c9' });\n    }\n  }\n\n  render() {\n\n    if (this.state.fontsLoaded) {\n      const styles = StyleSheet.create({\n        container: {\n          flex: 1,\n          backgroundColor: '#fff',\n          alignItems: 'center',\n          justifyContent: 'center',\n        },\n        button: {\n          backgroundColor: this.state.color,\n          height: 40,\n          width: 120,\n          justifyContent: 'center',\n          alignItems: 'center',\n          borderRadius: 10,\n          shadowColor: '#000',\n          shadowOffset: {\n            width: 0,\n            height: 4,\n          },\n          shadowOpacity: 0.32,\n          shadowRadius: 5.46,\n          elevation: 9,\n        },\n        myFont: {\n          color: 'white',\n          //fontFamily: 'Ubuntu-Regular'\n        }\n      });\n\n      return (\n        <View style={styles.container} >\n          <Text style={styles.myFont}>Open up App.js to start working on your app!</Text>\n          <Text>{'\\n'}</Text>\n          <TouchableOpacity style={styles.button} onPress={this.pressedOnce}>\n            <Text style={styles.myFont}>\n              Touch Me\n            </Text>\n          </TouchableOpacity>\n          <StatusBar style=\"auto\" />\n        </View>\n      );\n    } else {\n      return null;\n    }\n  }\n\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}